#!/usr/bin/env perl

BEGIN {
	binmode STDOUT, ':encoding(utf8)';
}

# ABSTRACT: Process supervision shell for Perp/S6/Runit

use lib 'lib';
use warnings;
use strict;

use Getopt::Compact;
use Term::ANSIColor qw/:constants/;
use Term::ShellUI;

=head1 NAME

svsh - Process supervision shell for Perp/S6/Runit

=head1 SYNOPSIS

	# from the command line
	$ svsh --suite perp --basedir /etc/services

	# run one specific command and exit
	$ svsh --suite runit --basedir /var/services restart nginx

=head1 DESCRIPTION

=begin markdown

![screenshot](https://ido50.github.io/Svsh/screenshot.png)

=end markdown

C<svsh> is a command line shell for process supervision suites of the L<daemontools|http://cr.yp.to/daemontools.html> family. Currently, it supports
L<perp|http://b0llix.net/perp/>, L<s6|http://www.skarnet.org/software/s6/index.html>
and L<runit|http://smarden.org/runit/> (yes, ironically C<daemontools> is not supported
yet). It provides a unified interface allowing easy inspection and manipulation of services
(i.e. processes) managed by supported supervision suites.

C<svsh> does not require any configurations or changes to your suite's service directories;
just point it at a base directory and you immediately get a usable shell, listing all
services and their statuses, and accepting commands to perform on them.

The shell provides a very simple syntax that is easy to remember, far simpler than the
particular syntax of the underlying supervision suite. Instead of having to execute
C<perpctl -b /services q nginx> to restart an C<nginx> service running from C</services/nginx>,
just execute C<restart nginx>. Couldn't be simpler. Want to send an C<HUP> signal to all
services whose names begin with C<"worker">? just execute C<signal hup worker*>.

C<svsh> is inspired by L<supervisord|http://www.supervisord.org/>'s C<supervisorctl> shell. I've
attempted to provide a similar syntax and feature set.

=head2 OPTIONS

=head2 -d, --basedir

I<Required>. Base directory of services supervised by the supervision suite.

=head2 -s, --suite

I<Required>. The supervision suite managing the base directory. Either C<perp>,
C<s6> or C<runit>.

=head2 -b, --bindir

If the supervision suite's tools are not in the environment C<PATH> variable,
you can provide the directory where they are located (e.g. C</usr/local/bin>).

=head2 -c, --collapse

Collapse multi-process services to one line in C<status>. See L</"COLLAPSE">
for more details. This can be changed from inside the shell too.

=head1 COMMANDS

The following commands are provided by C<svsh>. Note that some suites do not
support all commands.

=head2 status

Prints a list of all services, their statuses (up, down, etc.), uptimes (or
downtimes) and process IDs. This command is automatically executed upon
initialization of the shell.

=head2 start service, ...

Starts a list of one or more services, if they are not already up.

	svsh> start nginx haproxy

=head2 stop service, ...

Stops a list of one or more services. The services stopped will not be restarted.

	svsh> stop nginx haproxy

=head2 restart service, ...

Restarts a list of one or more services. Generally, this means sending a QUIT signal
to the services, which I<should> cause them to shutdown and be restarted by the
supervisor.

	svsh> restart nginx haproxy

=head2 signal sig service, ...

Send a UNIX signal to a list of one or more services. The name of the signal can
be lowercase or uppercase, and may include the prefix C<"SIG">.

	svsh> signal term nginx
	svsh> signal SIGUSR1 haproxy

=head2 rescan

I<Alias: update>.

Causes the supervision suite to rescan the base directory for new or removed services.

=head2 fg service

"Moves" a service to the foreground, so that its output streams (at least standard output,
possibly standard error) are printed on screen. In reality, it determines where the process'
log file is located, and tails it with C<tail -f>. See L</"LOG INSPECTION"> for more details, as this
is a complicated subject.

	svsh> fg nginx

=head2 terminate

I<Alias: shutdown>.

Terminate the supervision suite. This will cause all services managed by the supervisor to
terminate as well.

=head2 toggle option

Toggles a shell option on or off. Currently, only the C<collapse> option is supported. The
C<status> command will be automatically called after toggling the option.

	svsh> toggle collapse

=head2 help [ command ]

Prints help information. Can also provide information about specific commands.

	svsh> help signal

=head2 quit

I<Alias: exit>.

Quits the shell.

=head1 ADVANCED FEATURES AND IMPORTANT INFORMATION

=head2 LOG INSPECTION

All of the supported supervision suites do not enforce a logging scheme on managed
services. While all of them provide a logging tool (C<perp> provides C<tinylog> and
C<sissylog>; C<s6> provides C<s6-log>; C<runit> provides C<svlogd>), none of them
enforce their usage. It is actually not uncommon among users of these suites to
use a logging tool provided by one suite for services managed by another one.
This means it is hard for an external program such as C<svsh> to determine where
log files are stored, if at all.

Currently, C<svsh> will attempt to find the log file of a service by checking the
pid of the associated log process, and if (and only if) that process is one of the
supported loggers (C<tinylog>, C<s6-log> or C<svlogd>), it will try to find the
file descriptor used by that process under C<< /proc/<pid>/fd >>. As long as your services
are being logged by one of these tools, C<svsh> I<should> be able to C<tail> their log
files  when the L</"fg service"> command is used. However, if the log file is being rotated
while it is being tailed, behavior is currently undefined (will probably stop working until
the command is run again).

=head2 WILDCARDS

C<svsh> makes it easy to manipulate multiple services at once. Wildcards are supported
by the C<start>, C<stop>, C<restart> and C<signal> commands. If, for example, you have
several services whose names start with "worker", you can stop them all by executing
C<stop worker*>. Wildcards are also supported at the beginning of the name, so
C<signal term *d> will send a C<TERM> signal to all services whose names end with "d".

	svsh> status
	   process |     status | duration |   pid
	  worker-1 |         up |    9813s | 25984
	  worker-2 |         up |    9813s | 25976
	  worker-3 |         up |    4393s | 2990

	svsh> stop worker*

	svsh> status
	   process |     status | duration |   pid
	  worker-1 |       down |       2s |     -
	  worker-2 |       down |       2s |     -
	  worker-3 |       down |       2s |     -

=head2 COLLAPSE

Often times you would like to run a certain service with X number of identical processes.
None of the supervision suites have any mechanism to allow this (none that I
know of at least), apart from creating identical copies of a service directory for every
process needed. While C<svsh> can't help you with that, it provides a nice feature for collapsing
these identical services in the output of the L</"status"> command to just one line. This can
be very useful with lots of multi-process services.

Currently, C<svsh> determines multi-process services if their names are postfixed with a dash
and a number. For example, if you have a service called C<worker> that you need 3 processes
of which to run, you can create C<worker-1>, C<worker-2> and C<worker-3> service directories.
If the L<collapse/"-c, --collapse"> option is on, C<svsh> will collapse all of these into
just one line, under the name C<status>.

	svsh> status
	   process |     status | duration |   pid
	  worker-1 |         up |    9813s | 25984
	  worker-2 |         up |    9813s | 25976
	  worker-3 |         up |    4393s | 2990

	svsh> toggle collapse
	   process |     status | duration |   pid
	    worker |       3 up |    9850s |     -

This feature combines well with the L</"WILDCARDS"> feature.

Hopefully, future versions will find a more generic way of identifying multi-process services.

=cut

my $go = Getopt::Compact->new(
	name => 'svsh',
	struct => [
		[['d', 'basedir'], 'service directory (directory on which the supervisor was started)', '=s'],
		[['s', 'suite'], 'the supervision suite managing the base directory (perp, s6 or runit)', '=s'],
		[['b', 'bindir'], 'directory where the supervisor is installed (e.g. /usr/sbin)', ':s'],
		[['c', 'collapse'], 'collapse numbered services into one line']
	]
);
my $opts = $go->opts;

_check_suite($opts->{suite});
_check_basedir($opts->{basedir});

my $class = 'Svsh::'.ucfirst($opts->{suite});

eval "require $class";

die $@
	if $@;

my $svsh = $class->new(%$opts);

my $term = Term::ShellUI->new(
	commands => {
		status => {
			desc => 'Lists all processes and their statuses',
			method => sub {
				my %statuses = %{$svsh->status(@_)};

				if ($svsh->collapse) {
					my $collapsed = {};
					foreach my $sv (keys %statuses) {
						next unless $sv =~ m/-\d+$/;
						$collapsed->{$`} ||= [];
						push(@{$collapsed->{$`}}, delete $statuses{$sv});
					}
					foreach my $sv (keys %$collapsed) {
						my $status_counters = {};
						my $duration = 0;
						foreach my $proc (@{$collapsed->{$sv}}) {
							$status_counters->{$proc->{status}} += 1;
							$duration = $proc->{duration}
								if $proc->{duration} > $duration;
						}
						$statuses{$sv} = {
							status => join(', ', map($status_counters->{$_}.' '.$_, sort(keys(%$status_counters)))),
							pid => '-',
							duration => $duration
						};
					}
				}

				print BOLD BLACK ON_WHITE
					join(' | ',
						sprintf('%16s', 'process'),
						sprintf('%10s',  'status'),
						sprintf('%8s', 'duration'),
						sprintf('%5s',      'pid')
					), ' ', RESET, "\n";
				foreach (sort keys %statuses) {
					my $s = $statuses{$_};
					my $color = $s->{status} =~ m/^(\d+ )?up$/ ? GREEN :
							$s->{status} eq 'resetting' ? YELLOW : RED;
					print BOLD sprintf('%16s', $_), RESET, ' | ',
						$color, sprintf('%10s', $s->{status}), RESET, ' | ',
						sprintf('%8s', $s->{duration}.'s'), ' | ',
						sprintf('%5s', $s->{pid}), " \n";
				}
				print "\n";
			},
			doc => "\nUsage: status\n\nLists all services in the service directory and their statuses, including uptime (or downtime) and PIDs.\n\nIn Perp, status can be 'up', 'down', 'resetting', 'disabled' or 'backoff' (meaning the process should be up, but fails to load).\n\nIn S6, only 'up' and 'down' are provided.\n"
		},
		toggle => {
			desc => 'Toggle svsh switches (e.g. collapse)',
			minargs => 1,
			maxargs => 1,
			method => sub {
				foreach (@{$_[1]->{args}}) {
					next unless $svsh->can($_);
					$svsh->$_($svsh->$_ ? 0 : 1);
				}
				$_[0]->process_a_cmd('status');
			}
		},
		start => {
			desc => 'Starts a list of processes',
			minargs => 1,
			method => sub { print $svsh->start(@_) }
		},
		stop => {
			desc => 'Stops a list of running processes',
			minargs => 1,
			method => sub { print $svsh->stop(@_) }
		},
		restart => {
			desc => 'Restarts a list of processes',
			minargs => 1,
			method => sub { print $svsh->restart(@_) }
		},
		signal => {
			desc => 'Sends a signal to a list of processes',
			minargs => 2,
			method => sub { print $svsh->signal(@_) }
		},
		rescan => {
			desc => 'Rescans the service directory to look for new/removed services',
			maxargs => 0,
			method => sub {
				if ($svsh->can('rescan')) {
					print $svsh->rescan;
				} else {
					print ref($svsh).' does not support the rescan command', "\n";
				}
			}
		},
		update => { alias => 'rescan' },
		fg => {
			desc => 'Move a process to the foreground',
			minargs => 1,
			maxargs => 1,
			method => sub { $svsh->fg(@_) }
		},
		terminate => {
			desc => 'Shut down the process supervisor (all processes will terminate)',
			method => sub {
				if ($svsh->can('terminate')) {
					$svsh->terminate();
					shift->process_a_cmd('quit');
				} else {
					print ref($svsh).' does not support the terminate command', "\n";
				}
			}
		},
		shutdown => { alias => 'terminate' },
		help => {
			desc => 'Print helpful information',
			args => sub { shift->help_args(undef, @_); },
			method => sub { shift->help_call(undef, @_); }
		},
		quit => {
			desc => 'Quit this program',
			maxargs => 0,
			method => sub { shift->exit_requested(1) }
		},
		exit => { alias => 'quit' }
	},
	prompt => 'svsh> '
);
if (scalar @ARGV) {
	$term->process_a_cmd(join(' ', @ARGV));
} else {
	$term->process_a_cmd('status');
	$term->run;
}

sub _check_suite {
	my $suite = shift;

	$suite
		|| _error('Suite not provided');
	$suite =~ m/^(perp|s6|runit)$/
		|| _error('Suite must be perp, s6 or runit');
}

sub _check_basedir {
	my $basedir = shift;

	$basedir
		|| _error('Base directory not provided');
	-e $basedir && -d $basedir
		|| error('Base directory does not exist or is not a directory');
}

sub _error {
	my $msg = shift;

	print "ERROR: $msg\n", $go->usage;
	exit 1;
}

=head1 CONFIGURATION AND ENVIRONMENT

C<svsh> requires no configuration files or environment variables.

=head1 DEPENDENCIES

C<svsh> depends on the following modules:

=over

=item * L<Getopt::Compact>

=item * L<Moo>

=item * L<namespace::clean>

=item * L<Term::ANSIColor>

=item * L<Term::ShellUI>

=back

=head1 INCOMPATIBILITIES

None reported.

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to
C<bug-Svsh@rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Svsh>.

=head1 AUTHOR

Ido Perlmuter <ido at ido50 dot net>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Ido Perlmuter C<< ido at ido50 dot net >>.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself, either version
5.8.1 or any later version. See L<perlartistic|perlartistic> 
and L<perlgpl|perlgpl>.

The full text of the license can be found in the
LICENSE file included with this module.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

=cut

1;
__END__
